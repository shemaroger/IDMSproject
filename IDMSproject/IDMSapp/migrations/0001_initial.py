# Generated by Django 5.2.3 on 2025-06-25 18:50

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateTimeField()),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('P', 'Pending'), ('A', 'Approved'), ('C', 'Cancelled'), ('D', 'Completed')], default='P', max_length=1)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('icd_code', models.CharField(blank=True, max_length=10)),
                ('description', models.TextField(blank=True)),
                ('emergency_threshold', models.IntegerField(default=5)),
                ('is_contagious', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyAmbulanceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_time', models.DateTimeField(auto_now_add=True)),
                ('location', models.CharField(max_length=255)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('condition_description', models.TextField()),
                ('status', models.CharField(choices=[('P', 'Pending'), ('D', 'Dispatched'), ('A', 'Arrived'), ('T', 'In Transit'), ('C', 'Completed')], default='P', max_length=1)),
                ('assigned_ambulance', models.CharField(blank=True, max_length=100)),
                ('hospital_destination', models.CharField(blank=True, max_length=255)),
                ('suspected_disease', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('insurance_provider', models.CharField(blank=True, max_length=100)),
                ('insurance_number', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('permissions', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('related_diseases', models.JSONField(default=list)),
                ('severity_score', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('diagnosis', models.TextField()),
                ('treatment_summary', models.TextField()),
                ('is_archived', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.appointment')),
                ('emergency_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.emergencyambulancerequest')),
                ('related_diseases', models.ManyToManyField(to='IDMSapp.disease')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.patient')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='emergencyambulancerequest',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.patient'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.patient'),
        ),
        migrations.CreateModel(
            name='SymptomCheckerSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('risk_score', models.IntegerField(default=0)),
                ('recommendation', models.CharField(max_length=200)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('possible_diseases', models.ManyToManyField(to='IDMSapp.disease')),
                ('symptoms_selected', models.ManyToManyField(to='IDMSapp.symptom')),
            ],
        ),
        migrations.CreateModel(
            name='ScreeningAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('radius_km', models.IntegerField(default=5)),
                ('severity', models.CharField(choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High'), ('C', 'Critical')], max_length=1)),
                ('cases_reported', models.IntegerField()),
                ('threshold_exceeded', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.disease')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.symptomcheckersession')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('U', 'Prefer not to say')], max_length=1)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('license_number', models.CharField(blank=True, max_length=100)),
                ('specialization', models.CharField(blank=True, max_length=100)),
                ('blood_group', models.CharField(blank=True, max_length=5)),
                ('allergies', models.TextField(blank=True)),
                ('chronic_conditions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='symptomcheckersession',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patient',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HealthcareWorkerAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.screeningalert')),
                ('recipient', models.ForeignKey(limit_choices_to={'role__name__in': ['Doctor', 'Nurse', 'HealthOfficer']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='healthcare_provider',
            field=models.ForeignKey(limit_choices_to={'role__name__in': ['Doctor', 'Nurse']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PreventiveTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('tip_type', models.CharField(choices=[('MOSQUITO_NET', 'Mosquito Net Usage'), ('VACCINATION', 'Vaccination Campaign'), ('HYGIENE', 'Hygiene Practice'), ('ENVIRONMENT', 'Environmental Control'), ('EDUCATION', 'Health Education')], max_length=20)),
                ('disease_target', models.CharField(choices=[('MALARIA', 'Malaria'), ('PNEUMONIA', 'Pneumonia'), ('BOTH', 'Both'), ('GENERAL', 'General Health')], default='BOTH', max_length=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='prevention_tips/')),
                ('video_url', models.URLField(blank=True)),
                ('priority', models.IntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical')], default=2)),
                ('effectiveness', models.IntegerField(default=80, help_text='Estimated effectiveness percentage (1-100)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('campaign_start_date', models.DateField(blank=True, null=True)),
                ('campaign_end_date', models.DateField(blank=True, null=True)),
                ('campaign_locations', models.JSONField(blank=True, help_text='JSON array of target locations', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('related_symptoms', models.ManyToManyField(blank=True, help_text='Symptoms this tip helps prevent', to='IDMSapp.symptom')),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
                'indexes': [models.Index(fields=['tip_type'], name='IDMSapp_pre_tip_typ_3ee5f5_idx'), models.Index(fields=['disease_target'], name='IDMSapp_pre_disease_2f3fed_idx'), models.Index(fields=['priority'], name='IDMSapp_pre_priorit_b03afa_idx')],
            },
        ),
    ]
