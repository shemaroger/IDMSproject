# Generated by Django 5.2.3 on 2025-06-28 11:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateTimeField()),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('P', 'Pending'), ('A', 'Approved'), ('C', 'Cancelled'), ('D', 'Completed')], default='P', max_length=1)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('disease_type', models.CharField(choices=[('malaria', 'Malaria'), ('pneumonia', 'Pneumonia'), ('other', 'Other')], max_length=20)),
                ('icd_code', models.CharField(blank=True, max_length=10)),
                ('description', models.TextField(blank=True)),
                ('is_contagious', models.BooleanField(default=False)),
                ('common_symptoms', models.JSONField(default=list, help_text='Array of common symptoms for this disease')),
                ('symptom_weights', models.JSONField(default=dict, help_text='Symptom names mapped to their weight/importance scores')),
                ('mild_threshold', models.IntegerField(default=20, help_text='Score threshold for mild cases')),
                ('moderate_threshold', models.IntegerField(default=40, help_text='Score threshold for moderate cases')),
                ('severe_threshold', models.IntegerField(default=70, help_text='Score threshold for severe cases')),
                ('emergency_threshold', models.IntegerField(default=80, help_text='Score for immediate hospital visit')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyAmbulanceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_time', models.DateTimeField(auto_now_add=True)),
                ('location', models.CharField(max_length=255)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('condition_description', models.TextField()),
                ('status', models.CharField(choices=[('P', 'Pending'), ('D', 'Dispatched'), ('A', 'Arrived'), ('T', 'In Transit'), ('C', 'Completed')], default='P', max_length=1)),
                ('assigned_ambulance', models.CharField(blank=True, max_length=100)),
                ('hospital_destination', models.CharField(blank=True, max_length=255)),
                ('suspected_disease', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('insurance_provider', models.CharField(blank=True, max_length=100)),
                ('insurance_number', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('permissions', models.JSONField(blank=True, default=list)),
                ('can_self_register', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CronJobLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_name', models.CharField(help_text='Name of the scheduled job', max_length=100)),
                ('job_type', models.CharField(choices=[('DISEASE_ALERT', 'Disease Surveillance Alert'), ('SYMPTOM_ANALYSIS', 'Symptom Pattern Analysis'), ('EMERGENCY_CLEANUP', 'Emergency Request Cleanup'), ('APPOINTMENT_REMINDER', 'Appointment Reminders'), ('PREVENTION_CAMPAIGN', 'Prevention Campaign Updates'), ('DATA_BACKUP', 'Database Backup'), ('HEALTH_CHECK', 'System Health Check'), ('USER_CLEANUP', 'Inactive User Cleanup'), ('NOTIFICATION_QUEUE', 'Notification Queue Processing'), ('ANALYTICS_REPORT', 'Analytics Report Generation')], help_text='Category of the scheduled job', max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When the job started executing')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the job finished (success or failure)', null=True)),
                ('status', models.CharField(choices=[('S', 'Started'), ('C', 'Completed'), ('F', 'Failed'), ('T', 'Timeout')], default='S', help_text='Current status of the job', max_length=1)),
                ('duration_seconds', models.FloatField(blank=True, help_text='How long the job took to complete', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('records_processed', models.PositiveIntegerField(default=0, help_text='Number of records/items processed')),
                ('error_message', models.TextField(blank=True, help_text='Error details if job failed')),
                ('parameters', models.JSONField(blank=True, default=dict, help_text='Job parameters and configuration')),
                ('result_summary', models.JSONField(blank=True, default=dict, help_text='Summary of job execution results')),
                ('server_hostname', models.CharField(blank=True, help_text='Server that executed the job', max_length=100)),
                ('memory_usage_mb', models.PositiveIntegerField(blank=True, help_text='Peak memory usage during execution', null=True)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['job_type', '-timestamp'], name='IDMSapp_cro_job_typ_1bbeb0_idx'), models.Index(fields=['status', '-timestamp'], name='IDMSapp_cro_status_c6a696_idx'), models.Index(fields=['-timestamp'], name='IDMSapp_cro_timesta_75731b_idx')],
            },
        ),
        migrations.CreateModel(
            name='DiseaseAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculated_score', models.IntegerField(default=0)),
                ('probability_percentage', models.FloatField(default=0.0)),
                ('severity_assessment', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.disease')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('diagnosis', models.TextField()),
                ('treatment_summary', models.TextField()),
                ('is_archived', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.appointment')),
                ('emergency_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.emergencyambulancerequest')),
                ('related_diseases', models.ManyToManyField(to='IDMSapp.disease')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.patient')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='emergencyambulancerequest',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.patient'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.patient'),
        ),
        migrations.CreateModel(
            name='PreventionTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('prevention', 'Prevention'), ('self_care', 'Self Care'), ('when_to_seek_help', 'When to Seek Help'), ('emergency_signs', 'Emergency Signs')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.IntegerField(default=1, help_text='1=highest priority, 10=lowest')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prevention_tips', to='IDMSapp.disease')),
            ],
            options={
                'ordering': ['priority', 'category'],
            },
        ),
        migrations.CreateModel(
            name='SymptomCheckerSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('selected_symptoms', models.JSONField(default=list, help_text='Array of selected symptoms (predefined + custom)')),
                ('custom_symptoms', models.JSONField(default=list, help_text='Array of custom symptoms not in predefined list')),
                ('overall_risk_score', models.IntegerField(default=0)),
                ('severity_level', models.CharField(blank=True, max_length=20)),
                ('recommendation', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('age_range', models.CharField(blank=True, max_length=20)),
                ('gender', models.CharField(blank=True, max_length=1)),
                ('needs_followup', models.BooleanField(default=False)),
                ('followup_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('analyzed_diseases', models.ManyToManyField(through='IDMSapp.DiseaseAnalysis', to='IDMSapp.disease')),
                ('primary_suspected_disease', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_suspicions', to='IDMSapp.disease')),
            ],
        ),
        migrations.CreateModel(
            name='ScreeningAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('radius_km', models.IntegerField(default=5)),
                ('severity', models.CharField(choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High'), ('C', 'Critical')], max_length=1)),
                ('cases_reported', models.IntegerField()),
                ('threshold_exceeded', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.disease')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.symptomcheckersession')),
            ],
        ),
        migrations.AddField(
            model_name='diseaseanalysis',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.symptomcheckersession'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='IDMSapp.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('U', 'Prefer not to say')], max_length=1)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('license_number', models.CharField(blank=True, max_length=100)),
                ('specialization', models.CharField(blank=True, max_length=100)),
                ('blood_group', models.CharField(blank=True, max_length=5)),
                ('allergies', models.TextField(blank=True)),
                ('chronic_conditions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='symptomcheckersession',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patient',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HealthcareWorkerAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='IDMSapp.screeningalert')),
                ('recipient', models.ForeignKey(limit_choices_to={'role__name__in': ['Doctor', 'Nurse', 'HealthOfficer']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('phone_number', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('is_public', models.BooleanField(default=True)),
                ('services', models.JSONField(default=list, help_text='List of medical services offered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('staff', models.ManyToManyField(limit_choices_to={'role__name__in': ['Doctor', 'Nurse']}, related_name='clinics', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='healthcare_provider',
            field=models.ForeignKey(limit_choices_to={'role__name__in': ['Doctor', 'Nurse']}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='diseaseanalysis',
            unique_together={('session', 'disease')},
        ),
    ]
